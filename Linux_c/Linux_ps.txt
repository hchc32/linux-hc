进程相关的概念：
    1.什么是程序？
    答：编译好的二进制文件
    2.什么是进程？
    答：运行着的程序，
        运行一系列指令的过程，
        在操作系统角度：分配系统资源的基本单位
    3.程序与进程的区别?
    答：(1) 程序占用磁盘，不占用系统资源
        (2) 内存占用系统资源
        (3) 一个程序对应多个进程，一个进程对应一个程序
        (4) 程序没有生命周期，进程由生命周期
    4.单道程序设计与多道程序设计
        单道：每次只能运行一个程序，串行方式进行
        多道：微观上串行，宏观上并行
    5.MMU的作用:
    6.PCB的作用：
进程相关函数：
    1.fork 函数--->(用来创建一个进程)
        函数原型：pid_t fork(void);
        函数返回值：    失败: -1
                        成功: 两次返回值：
                                父进程返回子进程的ID
                                子进程返回 0
    2.获取进程ID函数
      函数原型：
                pid_t getpid(void)--->(获取当前进程的ID)
                pid_t getppid(void)--->(获取当前进程父进程的ID)
    3.fork函数执行流程
    4.查看进程信息:
      init进程是所有进程的祖先
        ps:     ps aux
                ps ajx  --可以追述进程之间的血缘关系
        kill：
                (1)给进程发送一个信号
                (2)SIGKILL 9号信号
                (3)kill -SIGKILL pid -->杀死进程
    5.循环创建n个子进程
        如果在循环中子进程不中断循环，将会出现问题，子进程会在循环中继续创建子进程。
    6.进程共享
        父子进程之间在fork后，有哪些相同之处？那些不同之处？
            父子相同处：全局变量·data·.text·堆·栈·环境变量·用户ID·宿主目录·进程工作目录·信号处理方式
            父子不同处：1. 进程ID
                        2. fork返回值
                        3. 父进程ID
                        4. 进程运行时间
                        5. 定时器
                        6.未决信号集
    7.exec族函数--->执行其他程序
        函数原型：
            int execl(const char *pathname, const char *arg, .../* (char  *) NULL */);
            int execlp(const char *file, const char *arg, .../* (char  *) NULL */);
                    file  要执行的程序
                    arg 参数列表:
                        参数列表最后一个需要一个NULL作为结尾
                    返回值:
                        只有失败才会返回
        函数作用:将当前进程的.text,data替换为所要家在的程序的.text,data，然后让进程从新的.text第一
                 条指令开始执行，但是进程的ID不变，换核不换壳
        函数所在头文件: #include<unistd.h>
    8.孤儿进程与僵尸进程
        孤儿进程(orphan)：父亲死了，子进程被init进程领养
        僵尸进程(zombie)：子进程死了，父进程没有回收子进程的资源（PCB）
        kill命令不能杀死僵尸进程
        如何回收僵尸进程:杀死父亲，init领养，负责回收

    9.子进程回收(知道子进程的死亡原因)
        函数原型:
            pid_t wait(int *wstatus);
                wstatus: 传出参数
        作用:
            阻塞等待
            回收子进程资源
            查看死亡原因
        函数返回值:
            成功 返回终止的子进程ID
            失败 返回-1
        子进程的死亡原因:
            正常死亡WIFEXITER
                如果WIFEXITED为真，使用WEXITSTATUS得到退出状态
            非正常死亡WIFSIGNALED
                如果WIFSIGNALED为真，使用WTERMSIG得到信号
        函数原型:
            pid_t waitpid(pid_t pid, int *wstatus, int options);
                pid：
                    <-1 组ID
                    =-1 回收任意
                    >0  回收指定的pid
                    =0  回收和调用进程组ID相同组内的子进程
                options
                    0与wait相同也会阻塞
                    WNOHANG 如果当前没有子进程退出的，会立即返回
        函数返回值:
            若果设置了WNOHANG，那么如果没有子进程退出，返回0，否则，返回退出进程的pid
            失败返回-1











