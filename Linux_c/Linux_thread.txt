1.线程
    
    线程的概念：轻量集的进程，一个进程内部可以有多个线程，默认情况下一个进程只有一个线程

    线程是最小的执行单位，进程是最小的系统资源分配单位
    
    内核实现都是通过clone函数实现的

    线程也有自己的pcb,但是地址空间是共享的

    1.线程共享资源
        1.文件描述符表
        2.每种信号的处理方式
        3.当前工作目录
        4.用户ID 和组ID
        5.内存地址空间(不包括stack)
    2.线程非共享资源
        1.线程ID
        2.处理器现场和栈指针
        3.独立的栈空间(用户空间栈)
        4.errno变量
        5.信号屏蔽字
        6.调度优先级
    3.线程中获取错误码对应的错误信息
        char *strerror(int errnum);
    4.创建线程函数
        函数所在头文件:#include<pthread.h>
        
        函数原型:int pthread_create(pthread_t *thread, const pthread_attr_t *attr,
                   void *(*start_routine) (void *), void *arg);
            thread :　线程的id（传出参数）
            attr : 线程的属性
            第三个参数:一个函数指针,void *func(void *)
            arg : 线程执行函数的参数
        
        函数返回值:
            成功返回0
            失败返回erron

        编译的时候需要加pthread库 -lpthread
    5.线程的退出函数
        函数所在头文件:#include<pthread.h>

        函数原型:void pthread_exit(void *retval);
        
        线程退出的注意事项：
                在线程中使用pthread_exit
                在线程中使用return(主控线程return代表退出进程)
                exit代表退出整个进程

    6.线程回收函数(阻塞等待回收)
        函数原型：int pthread_join(pthread_t thread, void **retval);
            thread创建的时候第一个传出参数
            retval代表的退出线程的退出信息(二级指针)
        作用：回收子线程的ＰＣＢ
            
    7.线程杀死函数
        函数原型:
            int pthread_cancel(pthread_t thread);
        函数所在头文件:#include<pthread>;
        
        函数返回值:成功返回0,失败返回erron值.
        
        被此函数杀死的线程，退出的信息为－１
        要能被杀死，必须要进行一次系统调用
        pthread_testcancel()添加取消点

    8.线程分离函数
        函数原型:
            int pthread_detach(pthread_t thread);
        函数所在头文件:
            #include<pthread>
        函数返回值:
            On  success,  pthread_detach()  returns  0; on error, it returns an error
number.
        调用该函数，此时不需要pthread_join回收资源
        
        设置成功后，子线程会自动回收自己的PCB

    9.通过属性设置分离属性
        
        1.线程属性类型:pthread_attr_t attr;

        2.线程属性操作函数:
            
            1.对线程属性变量的初始化:
                int pthread_attr_init (pthread_attr_t* attr);

            2.设置线程分离属性
                int pthread_attr_setdetachstate
                {
                    pthread_attr_t* attr,
                    int detachstate;
                };
                参数：
                    attr:线程属性
                    detachstate:
                        PTHREAD_CREATE_DATACHED(分离)
        
                        PTHREAD_CREATE_JOINABLE(未分离)
            3.释放线程资源函数：
                int pthread_attr_destory(pthread_attr_t* attr);
    10. 两个线程对同一个全局变量进行操作数据会混乱:
            
        混乱原因:
                1.多个线程操作共享资源
                2.cpu调度问题

        如何解决:   进行线程同步
    

    11.线程同步
        
        1.什么叫同步?
            按照先后顺序执行操作

        2.给共享资源加锁来实现串行
            １．本来多线程访问共享资源的时候，可以并行，通过加锁
                将并行改为串行
            ２．如果锁是锁着的
                    线程阻塞，阻塞在这把锁上
                如果锁是打开的
                    线程访问共享资源
                    再将这把锁锁上
                    访问结束后就会解锁
        3.互斥锁(互斥量)
            
            1.互斥锁类型:
                pthread_mutex_t mutex
            
            2.互斥锁的使用步骤：
                1.创建互斥锁 pthread_mutex_t mutex;
                2.初始化:pthread_mutex_init(&mutex,NULL);
                        ---可以认为mutex=1,有一把可用的锁
                3.找到线程共同操作的共享数据:
                    1.加锁: pthread_mutex_lock(&mutex);//阻塞线程
                        ---可以认为mutex=0,这把锁被用了
                    pthread_mutex_trylock(&mutex);//如果锁上锁,直接返回,不阻塞
                     
                    ......共享数据操作
                        尽量使得lock和unlock的区域很小
                    解锁:pthread_mutex_unlock(&mutex);
                        　阻塞在锁上的线程会被唤醒
                4.销毁:pthread_mutex_destory(&mutex);
            3.互斥锁相关函数:
                1.初始化互斥锁:
                    int pthread_mutex_init(pthread_mutex_t *restrict mutex,
                            const pthread_mutexattr_t *restrict attr);
                2.销毁互斥锁
                    pthread_mutex_destory(pthread_mutex_t *mutex);
                3.加锁
                    pthread_mutex_lock(pthread_mutex_t *mutex);
                    如果加锁的时候,锁已经被锁上了,线程会一直阻塞在锁的位置
                    锁被打开的时候解除阻塞
                4.尝试加锁
                    pthread_mutex_trylock(pthread_mutex_t *mutex);
                5.解锁
                    pthread_mutex_unlock(pthread_mutex_t *mutex);
            4.互斥锁的特点:
                    多个线程访问共享数据的时候是串行的
            5.互斥锁的使用缺点
                    效率低

    12.死锁
        
        1.自己锁自己,creat两次锁,第二次creat会阻塞在此处

        2.线程1获取锁a，线程2获取锁b，两个线程循环等待，相互阻塞
            死锁预防：
                循环等待条件：给资源编号，资源只能按序申请
                请求保持条件：资源静态分配，一次申请完所有资源
                不可剥夺条件：剥夺资源
                互斥条件：使用共享资源
            死锁避免：
                银行家算法
            死锁解除：杀掉进程，进程回退
    
    13.读写锁(是一把锁)
        
        1.读写锁变量: pthread_rwlock_t lock;
        
        2.读写锁的类型
            
            读锁:对内存做读操作
            
            写锁:对内存做写操作
        3.读写锁的特征
            1.线程A加读锁成功，之后读线程仍可加读锁
                读共享
            2.线程A加写锁成功，则读写锁均阻塞
                写独占
            3.线程A加读锁成功，则写锁阻塞
                读写不能同时
                写的优先级高
       4. 读写锁的场景
            线程A加写锁成功，线程B请求读锁
                B阻塞
            线程A持有读锁，线程B请求写锁
                B阻塞
            线程A拥有读锁， 线程B请求读锁
                B加锁成功
            
            读锁加锁成功，之后读锁能够加锁成功    
            读锁加锁成功，之后写锁阻塞
            写锁加锁成功，之后读锁阻塞
            写锁加锁成功，之后写锁阻塞

        5.读写锁适用的场景
            程序中的读操作远多于写操作
        6.主要操作函数
            定义读写锁:pthread_rwlock_t lock;

            初试化读写锁
                pthread_rwlock_init(

                pthread_rwlock_t *reatrict rwlock,  //需要初试化锁的地址

                const pthread_rwlockattr_t *restrict attr  //锁的属性，默认传NULL
                );

            销毁锁
                pthread_rwlock_destroy(pthread_rwlock_t *rwlock);

            加读锁（阻塞）
                pthread_rwlock_rdlock(pthread_rwlock_t *rwlock);

            加写锁（阻塞）
                pthread_rwlock_wrlock(pthread_rwlock_t *rwlock);

            尝试加读锁（不阻塞，未加锁返回0，已加锁返回错误号）
                pthread_rwlock_tryrdlock(pthread_rwlock_t *rwlock);

            尝试加写锁（不阻塞，未加锁返回0，已加锁返回错误号）
                pthread_rwlock_trywrlock(pthread_rwlock_t *rwlock);

            解锁
                pthread_rwlock_unlock(pthread_rwlock_t *rwlock);
       
        读写锁,互斥锁可以阻塞线程,但不是任何时候都能阻塞线程
         
    14.条件变量
        (不满足条件的时候让代码阻塞)
        1.条件变量不是锁,但是条件变量可以阻塞线程
        
        2.实现线程同步：条件变量+互斥锁
                互斥锁:保护一块共享数据
                条件变量:引起阻塞
                //生产者和消费者模型

        3.条件变量的两个动作:
            条件不满足:阻塞进程
            条件满足:通知阻塞的进程开始工作

        4.条件变量的类型:
            pthread_cond_t cond;(定义一个变量)

        5.主要函数:
            1.初始化一个条件变量
                int pthread_cond_init
                (   
                    pthread_cond_t *restrict cond,
                    const pthread_condattr_t *restrict attr //属性,一般为NULL 
                );
            2.销毁一个条件变量:
                int pthread_cond_destroy(pthread_cond_t *cond);
            3.阻塞等待一个条件变量:
                int pthread_cond_wait
                (
                    pthread_cond_t *restrict cond,
                    pthread_mutex_t *restrict mutex //锁
                );
               //看不见的操作// 
                先阻塞进程
                然后将已经上锁的mutex解锁，条件满足后，
                该函数解除阻塞，然后对互斥锁加锁

            4.限时等待一个条件变量:
                int pthread_cond_timedwait
                (
                    pthread_cond_t *restrict cond,
                    pthread_mutex_t *restrict mutex,
                    const struct timespec *restrict abstime
                );
            
            5.唤醒至少一个阻塞在条件变量上的进程
                int pthread_cond_signal(pthread_cond_t *cond);

            6.唤醒全部阻塞在条件变量上的线程
                int pthread_cond_broadcast(pthread_cond_t *cond);
    15.信号量(信号灯)---是锁(高级的互斥锁)
        
        1.头文件 - semaphore.h
        
        2.信号量类型
            sem_t sem;
            加强版的互斥锁
        3.主要函数
            1.初始化信号量:
                int sem_init
                (
                    sem_t *sem, 
                    int pshared, 
                    unsigned int value
                );
                pshared:
                    0 - 线程同步
                    1 - 进程同步
                value -最多有几个线程操作共享数据

            2.销毁信号量
                sem_destory(sem_t* sem);

            3.加锁
                sem_wait(sem_t* sem);
                调用一次wait相当于对value进行了-1
                如果sem为0,则加锁失败,线程阻塞

            4.尝试加锁
                sem_trywait(sem_t* sem);
                    sem == 0,加锁失败，不阻塞，直接返回

            5.限时尝试加锁
                sem_timedwait(sem_t* sem,xxxxxxx);

            6.解锁
                sem_post(sem_t* sem);
                    对sem做了++操作





































