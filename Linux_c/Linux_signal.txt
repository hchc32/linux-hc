信号初步认识
man 7 signal
1.特点：简单
        携带信息量少
        适用在某个特定的场景中

2.信号的状态:
            1.产生:
                1.键盘: crtl + c
                2.命令: kill
                3.系统函数: kill
                4.软条件:   定时器
                5.硬件: 段错误,除0错误
            2.未决状态 - 没有被处理的信号 - 等待被处理
            3.递达 - 对信号做出处理 - 处理的方式有:
                                                    1.忽略
                                                    2.捕捉
                                                    3.执行了默认的动作

3.信号优先级:   信号的优先级高,进程收到信号之后,暂停正在处理的工作,优先处理信号,处理完成后再进行暂停的工作

4.The signals SIGKILL and SIGSTOP cannot be caught, blocked, or ignored. ---＞保证操作系统正常运行

5.信号的四要素：
                1.编号
                2.名称（即编号的宏定义）
                3.事件（引起信号产生的事件，如段错误）
                4.默认处理动作

６．阻塞信号集，未决信号集　－－>在PCB中
    1.在PCB中,不能直接操作

    2.阻塞信号集:   里面放的是要屏蔽的信号

    3.未决信号集:   没有被处理的信号的集合
     
7.信号相关函数
    １．kill -->发送信号给指定进程
        函数原型: int kill(pid_t pid, int sig);
        函数所在头文件:#include <sys/types.h>
                       #include <signal.h>
    
    2.raise -->自己给自己发信号
        函数原型: int raise(int sig); 
        函数所在头文件:#include<signal.h>
    3.abort -->给自己发送异常终止信号
        函数原型：void abort(void);
            没有参数没有返回值，永远不会调用失败
    4.闹钟(定时器)
        alarm --设置定时器(每个进程只有一个定时器)
    *******使用的是自然定时法
            不受进程状态的影响 

        函数原型: unsigned int alarm(unsigned int seconds);
        函数所在头文件:#include<unistd>
            如果设置为0,闹钟被取消
        
        对于time ./use_alarm.c
            real time =用户+内核+损耗
            损耗来自:文件IO操作(用文件重定向可以节省时间)
    5.setitimer --定时器，并表现周期性定时
        函数原型：int setitimer(
                                int which, 
                                const struct itimerval *new_value,
                                struct itimerval *old_value
                                );
        struct itimerval{
                            struct timeval it_interval; //定时器循环周期
                            struct timeval it_val;      //第一次触发定时器时间
                        }                    
        struct timeval{
                            time_t tv_sec;   //秒
                            suseconds_t tv_usec; //微秒
                        }   
        函数所在头文件:#include<sys/time.h>
8.自定义信号集(set)
    1.操作自定义信号集的函数:
        1.int sigemptyset(sigset_t *set);  
            作用：将set集合置空，也就是将每个信号的标志为置位0
        
        2.int sigfillset(sigset_t *set);
            作用：将所有的信号加入ｓｅｔ集合，也就是将每个信号的标志位置为１
        3.int sigaddset(sigset_t *set, int signum);
            作用：将某一个信号添加到set集合里用来阻塞该信号
        4.int sigdelset(sigset_t *set, int signum);
            作用：从set集合中删除掉该信号,也就是将该信号的标志位置为0
        5.int sigismember(const sigset_t *set, int signum);
            作用:判断信号是否存在
    2.sigprocmask函数
        将自定义信号集设置给阻塞信号集
        函数原型：
            int sigprocmask(int how, const sigset_t *set, sigset_t *oldset);
    3.sigpenging读取当前进程的未决信号集
        函数原型:int sigpending(sigset_t *set);
            参数set -- 内核将未决信号集写入set(传出参数)

9.信号捕捉
    1.siganl函数 --->回掉函数
        typedef void (*sighandler_t)(int); -->函数指针
        
        sighandler_t signal(int signum, sighandler_t handler);
    2.sigaction函数
        函数原型:int sigaction(int signum, const struct sigaction *act,struct sigaction *oldact);
            参数:signum -->要捕捉的信号
                 struct sigaction {
                    void  (*sa_handler)(int);
                        常用的回调函数
                    void  (*sa_sigaction)(int, siginfo_t *, void *)
                    sigset_t  sa_mask;
                        在信号处理函数(以上两个函数任选一个)执行过程中，临时屏蔽指定的信号,可以用sigempty等来处理
                    int     sa_flags;
                        O --- sa_handler
                        设置为其他数字　--- sa_sigacation
                    void     (*sa_restorer)(void);
                        一般不用
                                    };
                第三个参数:上一次捕捉时候的设置,一般写为NULL












                    

















