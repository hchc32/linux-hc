Linux网络编程

1.网络开发设计模式
    1.c/s　服务器端和客户端 
    2.b/s　可以跨平台使用 http协议

2.分层模型
    1.七层:物数网传会表应
    2.四层:
        网络接口层
        网络层
        传输层
        应用层

3.新型网路地址转化函数(对IPv4和IPv6都适用)
    函数所在头文件:#include <arpa/inet.h>

    函数原型:int inet_pton(int af, const char *src, void *dst);
    函数功能:将点分十进制的ip地址转化为用网络传输的数值格式
                af:AF_INET / AF_INET6
                src:ip地址 xxx.xxx.xxx.xxx
                dst:存放转化后的结果
    函数原型:const char *inet_ntop(int af, const void *src,
                      char *dst, socklen_t size);
    函数功能:将数值格式转化为点分十进制的ip地址格式

4.TCP的三次握手(connect)
    
    标志位：
        SYN:请求建立连接
        ACK:应答
        FIN:断开链接
    
    连接需要三次握手:
        第一次握手:
            客户端:
                携带标志为SYN
                随机产生一个32位的序号:例如:1000
                    可以携带数据
            
            服务器端:
                检测SYN的值是否为1

        第二次握手:
            服务器端:
                ACK标志位+32位的确认序号
                    确认序号 = 客户端随机序号+1 例如:1001
                发起一个连接请求
                    SYN+32位随机序号 例如:2000

                客户端:
                    检测标志位:1
                    校验:确认序号是否正确
                    

        第三次握手:
                客户端:
                    发送确认数据包
                        ACK+确认序号
                            确认序号 = 服务器的随机序号+1

                服务器端:
                    检测:ACK是否为1
                    检验:确认序号是否正确

5.TCP的四次挥手
    第一次挥手:
        客户端:
            发送断开连接请求
                FIN+序号(必须要有的)
                ACK+序号
        
        服务器端:
            检测FIN值是否为1
            ack的作用告诉对方之前发的数据收到了多少




6.epoll--红黑树　　poll--线性表

    1.该函数生成一个epoll专用的文件描述符
        int epoll_creat(int size);
            size:epoll上能关注的最大描述符个数,
    
    2.用于控制某个epoll文件描述符事件,可以注册,修改,删除
        int epoll_ctl(int epfd, int op, int fd, struct epoll_event *event);
            epfd:epoll_creat生成的epoll专用描述符
            op: EPOLL_CTL_ADD -- 注册
                EPOLL_CTL_MOD -- 修改
                EPOLL_CTL_DEL -- 删除
            fd:关联的文件描述符
            event:告诉内核要监听什么事件
        struct epoll_event
        {
            __unit32_t events; //epoll事件
            epoll_data_t data; //用户数据
        }
 
        //共用体
        typedef union epoll_data
        {
                void* ptr;              //指定与fd相关的用户数据
                int fd;                 //指定事件所从属的目标文件描述符
                uint32_t u32;
                uint64_t u64;
        } epoll_data_t;


    3.等待IO事件发生 - 可以设置阻塞的函数
        int epoll_wait(int epfd, struct epoll_event *events,
                        int maxevents, int timeout);
            epfd:要检测的句柄
            events:结构体数组的地址（传出参数）
            maxevents:events数组的大小
            timeout:设置等待的时间
                        -1 永久阻塞
                        0  立即返回
                        >0 

7.epoll的三种工作模式
    1.水平触发模式
        只要fd对应的读缓冲区有数据
        epoll_wait就返回，并且返回的次数与发送的数据次数没有关系
        epoll默认的工作模式

    2.边沿触发模式--ET
        客户端给server发数据
            发一次数据server的epoll_wait返回一次
            
            不在乎数据是否读完

    3.边沿非阻塞触发模式
        效率最高
            如何设置非阻塞？
                1.设置flags open()时设置非阻塞
                
                2.fcntl来设置非阻塞
                

8.文件描述符号突破1024限制
    1.select　－　突破不了，需要编译内核
        通过数组实现的
    2.poll和epoll都可以突破１０２４限制
        poll内部链表
        epoll红黑树
