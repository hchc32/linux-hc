!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BAD_REQUEST	http_conn.h	/^        BAD_REQUEST,  \/\/http请求报文有语法错误$/;"	e	enum:http_conn::HTTP_CODE
CHECK_STATE	http_conn.h	/^    enum CHECK_STATE$/;"	g	class:http_conn
CHECK_STATE_CONTENT	http_conn.h	/^        CHECK_STATE_CONTENT$/;"	e	enum:http_conn::CHECK_STATE
CHECK_STATE_HEADER	http_conn.h	/^        CHECK_STATE_HEADER,$/;"	e	enum:http_conn::CHECK_STATE
CHECK_STATE_REQUESTLINE	http_conn.h	/^        CHECK_STATE_REQUESTLINE=0,$/;"	e	enum:http_conn::CHECK_STATE
CLOSED_CONNECTION	http_conn.h	/^        CLOSED_CONNECTION$/;"	e	enum:http_conn::HTTP_CODE
FILENAME_LEN	http_conn.h	/^    static const int FILENAME_LEN=200;$/;"	m	class:http_conn
FILE_REQUEST	http_conn.h	/^        FILE_REQUEST,$/;"	e	enum:http_conn::HTTP_CODE
FORBIDDEN_REQUEST	http_conn.h	/^        FORBIDDEN_REQUEST,\/\/请求被服务器拒绝$/;"	e	enum:http_conn::HTTP_CODE
GET	http_conn.h	/^        GET=0,$/;"	e	enum:http_conn::METHOD
GET_REQUEST	http_conn.h	/^        GET_REQUEST,  \/\/获得了完整的http请求$/;"	e	enum:http_conn::HTTP_CODE
HTTP_CODE	http_conn.h	/^    enum HTTP_CODE$/;"	g	class:http_conn
HTTP_CONN_H	http_conn.h	2;"	d
INTERNAL_ERROR	http_conn.h	/^        INTERNAL_ERROR,   \/\/服务器端请求出错$/;"	e	enum:http_conn::HTTP_CODE
LINE_BAD	http_conn.h	/^        LINE_BAD,$/;"	e	enum:http_conn::LINE_STATUS
LINE_OK	http_conn.h	/^        LINE_OK=0,$/;"	e	enum:http_conn::LINE_STATUS
LINE_OPEN	http_conn.h	/^        LINE_OPEN$/;"	e	enum:http_conn::LINE_STATUS
LINE_STATUS	http_conn.h	/^    enum LINE_STATUS$/;"	g	class:http_conn
METHOD	http_conn.h	/^    enum METHOD$/;"	g	class:http_conn
NO_REQUEST	http_conn.h	/^        NO_REQUEST=0, \/\/请求不完整$/;"	e	enum:http_conn::HTTP_CODE
NO_RESOURCE	http_conn.h	/^        NO_RESOURCE,$/;"	e	enum:http_conn::HTTP_CODE
POST	http_conn.h	/^        POST$/;"	e	enum:http_conn::METHOD
READ_BUFFER_SIZE	http_conn.h	/^    static const int READ_BUFFER_SIZE=2048;$/;"	m	class:http_conn
WRITE_BUFFER_SIZE	http_conn.h	/^    static const int WRITE_BUFFER_SIZE=1024;$/;"	m	class:http_conn
add_blank_line	http_conn.cpp	/^bool http_conn::add_blank_line()$/;"	f	class:http_conn
add_content	http_conn.cpp	/^bool http_conn::add_content(const char *content)$/;"	f	class:http_conn
add_content_length	http_conn.cpp	/^bool http_conn::add_content_length(int content_len)$/;"	f	class:http_conn
add_content_type	http_conn.cpp	/^bool http_conn::add_content_type()$/;"	f	class:http_conn
add_headers	http_conn.cpp	/^bool http_conn::add_headers(int content_len)$/;"	f	class:http_conn
add_linger	http_conn.cpp	/^bool http_conn::add_linger()$/;"	f	class:http_conn
add_response	http_conn.cpp	/^bool http_conn::add_response(const char *format,...)$/;"	f	class:http_conn
add_status_line	http_conn.cpp	/^bool http_conn::add_status_line(int status,const char *title)$/;"	f	class:http_conn
addfd	http_conn.cpp	/^void addfd(int epollfd,int fd,bool one_shot)$/;"	f
bytes_have_send	http_conn.h	/^    int bytes_have_send;$/;"	m	class:http_conn
bytes_to_send	http_conn.h	/^    int bytes_to_send;$/;"	m	class:http_conn
cgi	http_conn.h	/^    int cgi;$/;"	m	class:http_conn
close_conn	http_conn.cpp	/^void http_conn::close_conn(bool real_close)$/;"	f	class:http_conn
do_request	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::do_request()$/;"	f	class:http_conn
doc_root	http_conn.cpp	/^const char *doc_root = "\/home\/hchc\/Desktop\/TinyWebServer\/TinyWebServer-raw_version\/root";$/;"	v
error_400_form	http_conn.cpp	/^const char *error_400_form = "Your request has bad syntax or is inherently impossible to staisfy.\\n";$/;"	v
error_400_title	http_conn.cpp	/^const char *error_400_title = "Bad Request";$/;"	v
error_403_form	http_conn.cpp	/^const char *error_403_form = "You do not have permission to get file form this server.\\n";$/;"	v
error_403_title	http_conn.cpp	/^const char *error_403_title = "Forbidden";$/;"	v
error_404_form	http_conn.cpp	/^const char *error_404_form = "The requested file was not found on this server.\\n";$/;"	v
error_404_title	http_conn.cpp	/^const char *error_404_title = "Not Found";$/;"	v
error_500_form	http_conn.cpp	/^const char *error_500_form = "There was an unusual problem serving the request file.\\n";$/;"	v
error_500_title	http_conn.cpp	/^const char *error_500_title = "Internal Error";$/;"	v
get_address	http_conn.h	/^    sockaddr_in *get_address()$/;"	f	class:http_conn
get_line	http_conn.h	/^    char *get_line() { return m_read_buf + m_start_line; };$/;"	f	class:http_conn
http_conn	http_conn.h	/^    http_conn() {}$/;"	f	class:http_conn
http_conn	http_conn.h	/^class http_conn$/;"	c
init	http_conn.cpp	/^void http_conn::init()$/;"	f	class:http_conn
init	http_conn.cpp	/^void http_conn::init(int sockfd ,const sockaddr_in &addr)$/;"	f	class:http_conn
m_address	http_conn.h	/^    sockaddr_in m_address;$/;"	m	class:http_conn
m_check_state	http_conn.h	/^    CHECK_STATE m_check_state;$/;"	m	class:http_conn
m_checked_idx	http_conn.h	/^    int m_checked_idx;$/;"	m	class:http_conn
m_content_length	http_conn.h	/^    int m_content_length;$/;"	m	class:http_conn
m_epollfd	http_conn.h	/^    static int m_epollfd;$/;"	m	class:http_conn
m_file_address	http_conn.h	/^    char *m_file_address;$/;"	m	class:http_conn
m_file_stat	http_conn.h	/^    struct stat m_file_stat;$/;"	m	class:http_conn	typeref:struct:http_conn::stat
m_host	http_conn.h	/^    char *m_host;$/;"	m	class:http_conn
m_iv	http_conn.h	/^    struct iovec m_iv[2];$/;"	m	class:http_conn	typeref:struct:http_conn::iovec
m_iv_count	http_conn.h	/^    int m_iv_count;$/;"	m	class:http_conn
m_linger	http_conn.h	/^    bool m_linger;$/;"	m	class:http_conn
m_lock	http_conn.cpp	/^locker m_lock;$/;"	v
m_method	http_conn.h	/^    METHOD m_method;$/;"	m	class:http_conn
m_read_buf	http_conn.h	/^    char m_read_buf[READ_BUFFER_SIZE];$/;"	m	class:http_conn
m_read_idx	http_conn.h	/^    int m_read_idx;$/;"	m	class:http_conn
m_real_file	http_conn.h	/^    char m_real_file[FILENAME_LEN];$/;"	m	class:http_conn
m_sockfd	http_conn.h	/^    int m_sockfd;$/;"	m	class:http_conn
m_start_line	http_conn.h	/^    int m_start_line;$/;"	m	class:http_conn
m_string	http_conn.h	/^    char *m_string;$/;"	m	class:http_conn
m_url	http_conn.h	/^    char *m_url;$/;"	m	class:http_conn
m_user_count	http_conn.h	/^    static int m_user_count;$/;"	m	class:http_conn
m_version	http_conn.h	/^    char *m_version;$/;"	m	class:http_conn
m_write_buf	http_conn.h	/^    char m_write_buf[WRITE_BUFFER_SIZE];$/;"	m	class:http_conn
m_write_idx	http_conn.h	/^    int m_write_idx;$/;"	m	class:http_conn
main	test_strpbrk.c	/^int main()$/;"	f
modfd	http_conn.cpp	/^void modfd(int epollfd,int fd,int ev)$/;"	f
mysql	http_conn.h	/^    MYSQL *mysql;$/;"	m	class:http_conn
ok_200_title	http_conn.cpp	/^const char *ok_200_title = "OK";$/;"	v
parse_content	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::parse_content(char *text)$/;"	f	class:http_conn
parse_headers	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::parse_headers(char *text)$/;"	f	class:http_conn
parse_line	http_conn.cpp	/^http_conn::LINE_STATUS http_conn::parse_line()$/;"	f	class:http_conn
parse_request_line	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::parse_request_line(char *text)$/;"	f	class:http_conn
process	http_conn.cpp	/^void http_conn::process()$/;"	f	class:http_conn
process_read	http_conn.cpp	/^http_conn::HTTP_CODE http_conn::process_read()$/;"	f	class:http_conn
process_write	http_conn.cpp	/^bool http_conn::process_write(HTTP_CODE ret)$/;"	f	class:http_conn
read_once	http_conn.cpp	/^bool http_conn::read_once()$/;"	f	class:http_conn
removefd	http_conn.cpp	/^void removefd(int epollfd,int fd)$/;"	f
setnoblocking	http_conn.cpp	/^int setnoblocking(int fd)$/;"	f
unmap	http_conn.cpp	/^void http_conn::unmap()$/;"	f	class:http_conn
write	http_conn.cpp	/^bool http_conn::write()$/;"	f	class:http_conn
~http_conn	http_conn.h	/^    ~http_conn() {}$/;"	f	class:http_conn
